
/** @type {IConfig} */
const config = {
	nodes: {
		types: {
			default: { // this is a type of node
				name: 'default', // this is how it will be displayed in the GUI
				headerPropertyId: 'id', // the property to display between the grab area and the delete btn
				properties: { // list of properties and their definition
					id: {
						viewType: ConfigOptionsPropViewType.GUID // display the GUID of the node (readonly)
					},
					text: {
						isMonoline: false, // not on one line
						placeholder: 'Text',
						viewType: ConfigOptionsPropViewType.SimpleText // text field (value = string)
					}
				}
			},
            // ...
		}
	},
    links: {
        types: {
            default: { // this is a type of link
                name: "Choice",
                headerPropertyId: 'isAuto',
                hasTargetNode: true, // this link must be end with a node (false = floating)
                properties: {
                    isAuto: {
                        label: "Is auto", // text next to the checkbox
                        defaultValue: true,
                        viewType: ConfigOptionsPropViewType.Checkbox // checkbox (value = boolean)
                    },
                    // same as for nodes
                }
            },
            // ...
        }
    },

    // convert the graph into a string; you are supposed to paste this string into your code, for integration in your engine, whatever it is (but you do whatever you want)
	toCodeConverter: (ctx) => {
        let json = ``;

        // create your own data structure from the graph; for instance, here, we create JSON
        
        for(const node of ctx.graph.flatNodes) {
            // find links with 'node' as their source
            const links = ctx.graph.flatLinks.filter(l => l.srcNodeGuid === node.guid);

            json += `"${node.properties.id.value}": {
                "text": "${node.properties.text.value}",
                "nextNodes": [
                    ${links
                        .map(l => `{
                            "isAuto": ${l.properties.isAuto.value ? 'true' : 'false'},
                            "targetId": "${l.getTargetNode(ctx.graph.nodes).properties.id.value}"
                        },`)
                        .join('\n')
                    }
                ]
            },`
        }

        json = `{ ${json} }`;

        // ctx.data contains a parsable representation of the graph; the software need it to load the data, so we add ctx.data with comments; this way, we will be able to just copy the content of the file, and when loaded in the software, this part will be extracted (it's just easier and more maintenable to have the 'generated code' and the 'parsable data' in the same file)
        json = `//${ctx.data} \n ${json}`;

        return json;
    },
    
    // for code editor in the GUI (properties); if you don't use editor properties, then this is not used
	defaultLang: {
        language: 'typescript',
        ext: '.tsx',
	},
	afterCode: () => '', // code to add before editor fields
	beforeCode: () => '', // code to add after editor fields
}

return config;
